import hashlib
from Crypto.Cipher import ChaCha20
# Hashes the message with SHA256 and casts the result into an integer.
def h(m):
    return int(hashlib.sha384(m).hexdigest(),16)


#Randomness too small
def sign1(G, m, n, a):
    F = Integers(n)
    #Hack to have a too small randomness
    n2 = n//2^32
    k = F(ZZ.random_element(n2))
    (x1,y1) = (k*G).xy()
    r = F(x1)
    return (r, (F(h(m)) +a * r) /F(k))


# Signs the message m using the point <G>
# <G> has to be a point on an elliptic curve of order <n>
# <a> is the ECDSA private key
# Returns the deterministic ECDSA signature
def sign2(G, m, n, a):
    F = Integers(n)
    key = hashlib.sha256(m).digest()
    nonce = b"\x00"*24
    cipher = ChaCha20.new(key=key, nonce = nonce)
    #ciphertext = cipher.encrypt(plaintext)
    size_n = ceil(RR(log(n,2))/8) #taille en bytes
    k = int.from_bytes(cipher.encrypt(b"\x00"*size_n))
    (x1,y1) = (k*G).xy()
    r = F(x1)
    return (r, (F(h(m)) +a * r) /F(k))


# Signs the message m using the point <G>
# <G> has to be a point on an elliptic curve of order <n>
# <a> is the ECDSA private key
# Returns the deterministic ECDSA signature
def sign3(G, m, n, a):
    F = Integers(n)
    key = hashlib.sha256(str(a).encode()).digest()
    nonce = hashlib.sha256(str(a).encode()).digest()[:24]
    cipher = ChaCha20.new(key=key, nonce = nonce)
    #ciphertext = cipher.encrypt(plaintext)
    size_n = ceil(RR(log(n,2))/8) #taille en bytes
    k = int.from_bytes(cipher.encrypt(b"\x00"*size_n))
    (x1,y1) = (k*G).xy()
    r = F(x1)
    return (r, (F(h(m)) +a * r) /F(k))


# Signs the message m using the point <G>
# <G> has to be a point on an elliptic curve of order <n>
# <a> is the ECDSA private key
# Returns the deterministic ECDSA signature
def sign4(G, m, n, a):
    F = Integers(n)
    k = int(hashlib.sha256(str(a).encode() + str(m).encode()).hexdigest(),16)
    (x1,y1) = (k*G).xy()
    r = F(x1)
    return (r, (F(h(m)) +a * r) /F(k))

def verif(G, A, m, sig, F):
    u1 = h(m)/ F(sig[1])
    u2 = F(sig[0])/F(sig[1])
    return F((u1*G+u2*A)[0]) == sig[0]

#p384 params
def params():
    p = int("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff", 16)
    n = int("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973", 16)
    a = int("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc", 16)
    b = int("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef", 16)
    E = EllipticCurve(GF(p), [a,b])
    Gx, Gy = int("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7", 16), int("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f",16)
    G = E(Gx,Gy)
    return (p, E, G, n)

#ECDSA Key Generation
# <G> has to be a point of an elliptic curve of order <n>
# Return the private key a and the public key A 
def keyGen(G, n):
    x = Integers(n).random_element().lift()
    A = G*x
    return (x, A)
# Lattice Attack on the hidden number problem due to lack of randomness
def challenge1(p,E,G,n):
    messages1 = [b'This is message number 0', b'This is message number 1', b'This is message number 2', b'This is message number 3', b'This is message number 4', b'This is message number 5', b'This is message number 6', b'This is message number 7', b'This is message number 8', b'This is message number 9', b'This is message number 10', b'This is message number 11', b'This is message number 12', b'This is message number 13', b'This is message number 14', b'This is message number 15', b'This is message number 16', b'This is message number 17', b'This is message number 18', b'This is message number 19']
    signatures1 = [(35008376021275610858308656820692656981452315132236852772418589050824915774344371711029219234073085600717628545115188, 549066568075075476296274979244131338262710623710309066099940561002939395631713465588128385510860809081559818123807), (8294054352045786878901533843387724294088968900800466292000764679909542268740033592384512148001624305970805667117133, 1114091170538334127309832034436488814369444263298867900405018711300182837788987371347981824737270777126088614423965), (3260271763573736116647982136853937326256376599858914143642223686003632424326705355924728941600344017887258353663593, 11567800159432176283429191950567544287180787813088899428267112242920634963883948649810044755134416723693510143828645), (8011407232264909014100566316360803686506607172909344365226696080574699982165933572384322671464241548995274260894168, 32646346461180795329261776586718649304752844046309614189695324993880431350298759786819026614457541601040753664926922), (30893748267508448168361636292244650063914420439739014296364387366730912403364056386505046821445878932975242942065322, 36786965603631886812145141114560772999551524093780349736139946304171690107780778602186731096716690569911588361124520), (34934409481893809110696743163663979824884711706228333567410946042619485573182595764435965785809296607328955766433929, 30148607046496468691182592053968159268985350538421253653235377751897173270912906926185931247997398943327735613498981), (22207919743740141271733250290410166761769871274176875333113768817984697619197535192548334128716457620621914321079481, 36976591952457302502135696397019463803398842321299959218190191356289289014835969919880525958956454272260134229817733), (19007314512091756212448415585212579604266425178481851961194954910161381346011659505673320464177275339007458055077177, 6151452155622716402204205944642555374437735560682494503428065775024431987973412967913512868349479895176159615527541), (25583233851837183172008484085976175390372919969101957838008892432722176571987759748712301057130578351062540324391754, 5964211119091420871255498111289170835234826129500004329484377685788465840439750592761125849004907926597377900994021), (16932621149897721370800084116898927615663585745876876884938155094703907331093772480946610262229829491879684937459238, 6332018002902360492309965017404887138722659381595491101909500246474594378993140214866580468334505403089860620598189), (28848589053204138859509605027378290972357691151505427261418618200518575025883016587495322947086369878774133008621370, 19962777504941220284208440813103996602606564989223684234512905264813240683520517595698042516558301597477552179193056), (36572380407267514041485986876906002533978500747372319275860471180888372338126058184377629202245272307087583381689220, 36563379332424571953492317232141909336495522602744292565414290344958132940601618242540308398658986385186000521371493), (29276580855206037256071138257380898747752490731680228838485387114111628890364155547058786957358015489766178803442997, 17849345489955564766726482889798748770074007393325647287504909205868653349438866532029562523007531585605686025946208), (14250687510643183743516518926776333125209183384184380114227077881561590963735971374560716310933880030983528695266624, 24122297539155486537736469071027025861776779446954266339947612470281502665122409609115971413130109745498332947853984), (6587621831447606457995362670043546058116009128302457653703638481783572409974125919479979592199371271154382631493019, 28321267985761722096624165172662729114059598858068332143701891891924510237674411569714797166232428178901671423643860), (22128472782688542560967469152745882610449538189692892693911910996086063345781385427658598707953525184820627322608379, 30587999732679153383168279757385657746346453894189638204775656917147225715749813739712729890794169317191063016824661), (23067754332207375572900857514410715160373655071820133805930133087680980394279450943535401578128895183205547361230177, 12575580930304823242371644752336289936939336809654799348653571553934059467027941573836665385294486314630513815113573), (10986570259742007195804089585593398193863095880828581513834050491641350998195293991582202636383465954185965103349904, 681443814463377759709533105294151973628648101834077533252077224153144551292048412262444796082803260835199959120758), (4236445535598015939317884515435277068507710814379771458704927836804436183236772142552488472026743110232933480481826, 3389415415584082403364024105374039781497175503424025729691652437407144542034904444330407353647634864424157079825795), (17769805035711521106631432422195152438417614478791633473402201925815311946456982434598569017979539757531232992441177, 33429334555275427085080833190871047606015296672982926292753888883241954074024193072326190180380676671465495939781493)]
    A1 = E(18012694871650400903275574844605256438953275112182499252968473063330984812642463746388132206509985998459011380061160, 10860520275532668894559705822990487006344876832571899351362003600285726856686833891757289044676545303406773197991148)

    m1 = messages1
    s1 = signatures1

    nbCols = len(s1) + 2
    nbRows = nbCols
    Aspace = MatrixSpace(QQ, nbRows, nbCols)
    
    A = copy(Aspace.identity_matrix())

    A = A*n
    B = n // pow(2,32)

    A[ - 2,  - 2] = B / n
    A[ - 1,  - 1] = B

    for i in range(len(m1)):
        
        ai = ((-h(m1[i]))/s1[i][1]) % n
        ti = (s1[i][0]/s1[i][1]) % n
        A[-1, i] = ai
        A[-2, i] = ti
    
    M = A.LLL()

    for v in M:
        if v[-1] == B:
            alpha = ZZ((- v[-2] * n / B)%n)
    
    if (alpha * G == A1):
        print("Cracked private key")
        print(alpha)
def challenge2(p,E,G,n):
    messages2 = [b'This is message number 0', b'This is message number 1', b'This is message number 2', b'This is message number 3', b'This is message number 4', b'This is message number 5', b'This is message number 6', b'This is message number 7', b'This is message number 8', b'This is message number 9', b'This is message number 10', b'This is message number 11', b'This is message number 12', b'This is message number 13', b'This is message number 14', b'This is message number 15', b'This is message number 16', b'This is message number 17', b'This is message number 18', b'This is message number 19']
    signatures2 = [(36862367164919741003328514461110063229719266960258291161590528519965725586391915699151761914515349752495682127064478, 3497719383671970382593316173756858887197468973326580871852467161102749410184752499256524935931649257235444531468055), (28461998444310225411012171237581868750617248511396661908930241066840449034901037608848132931026731999222914149715444, 18017608977371706504637705543506127508241209196629019527614570296494288312657891422245364251332165441848038395263054), (25792413555992805465654673269383153707689634533616346431323059891451281303500546140805035177034448830667822727939608, 4718895036590137929618211391183418986105410742854830623615562828578992656581467161211988383578477429574442476468159), (34313205440604360692106982387323794733760311130398297951199591915014679862217109222017835797657405534768192949713756, 24677389219574920031455364404690833611324706335465728381209299664255253749132359898086212881977933794153192723868834), (26270968966165742719514479252426110556284126979904097304204367121767650066913274379895595073967728931190307814979707, 6097635274982679169887185947983113548060627508282292725210551611119760791308260515900632275267052461499136823025409), (28540554115943232139040263504994871218118303190396990856755281100251733709579974826279273628336574530552088976913116, 17854675345778644271128394591026454628626090818747719848806433953939677722496822942345638618694702481471440136324382), (30439814946977407827351932935225516444452471935418647524393282196351073585410221148479975111184446744504687731370354, 26149373143378501277885971039338829294842585834293710396993918733579577237341688301174557911139779469902725896326608), (18457237749535630699297446538101280462140918867814796660945182092507902356649030747323942012327252228626736229427930, 17006975802748028013128819728078953661512022281381090222848294439499397714897124125210982022008797767847669841448346), (29016831729799215332505170096415210038108757598368960467751673687901281736665588740282433125051557560386588105172048, 9449586538481477595911784804846881333611555805327032995860648671545097931421440583363345934602693842866484345720765), (13783482961357362300320198829660539429115403590208266057277588308291692363207551418992934878520279396456143387769443, 30199309679239230892231928008778843706577484107748243619163469542486270665797545007544903088905706775621975585970982), (22946445695583219843757717304218150216722851787772953894931097616858518113633842698668566240674553325996594966898651, 25502627786678159894712279695782951406941594951863186539785757849430062911184471435704566740855673312904382331299455), (28233478177050060410367405617911208974696566513816822686173269882302393925906127490133091551488689332044938405473628, 5987039927103670360978146430716891826898473897830482898372778239400139489799377356014757458532257101007352680849260), (12761300292453977769962003974365411608309642408280485673154923022500344377717760104344647954572016278626244646710332, 29978106809305640480664266470794825498341466297162013781277417011028790794548806638654100978139333253333947575155998), (6264795001659886103730816894274078872074288611075035996248338331597328925416336475512720726435435064162107401317839, 38215755359416047574533264446501556925890020769278279666303184377798532456444115537625796165946903059594266772668307), (34753629199761194988947226377653934429531104045917895690640151404368716992210639739175929279437227823889091107270528, 32831738624938368535781637698050039224365437246658136192064570729023683221625537325380222627677366273496912641547592), (34761524733970348406165769446360857975829753237886856202231043083312783042430937359753324766561670210574806240508626, 2915585449926052224307512249985173735989963222559725990923364357522177448591083225368827736540168195055426264325658), (33066162829898956680337427167934448031945673837943036112054566881016866469976770055842822566894154494753187377571823, 26451275413126196174115405577947621697513542251514920886173595955189401839163721736967971752469060286273223275273988), (25502724270820722691176009576226841759878490940071987505974766845580776796943302676997797739201543502397495687405846, 34570702255808704039152757706236546101784089714129803231805348871353208130618829773789548573493756790787470503468908), (33845498146572043831937976981967123857647082778283597171562326031814561085086557969495499863528393982911882084762888, 6439773252796053065850894600929335427269871509516136611120962812948698170651983177872391921658132349551906494398218), (34497126197700655313139245659066172620937946688295103893500798665107816347812574755493179302718729237916127115154794, 28929035221765716241721363848967883460785337388059317268130333131648539027075666032113246572381267496757649293122849)]
    A2 = E(21709774648437266106603430703946549997271669155720866416441778801227287616121586375407461000033329122812777833382113, 36264128682840048136371344543624493862217408196732981540335267169897772715295459596475598997900535416123798203353597)
    
    nonce = b"\x00"*24
    i = 0
    
    m = messages2[i]
    r = signatures2[i][0]
    s = signatures2[i][1]

    F = Integers(n)
    key = hashlib.sha256(m).digest()                    # can calculate

    cipher = ChaCha20.new(key=key, nonce = nonce)       
    size_n = ceil(RR(log(n,2))/8) 
    k = int.from_bytes(cipher.encrypt(b"\x00"*size_n))  # can calcualte
    
    a = F(s * k - h(m))/F(r)                            # Isolating the key

    if ( a * G == A2 ):
        print("Cracked private key")
        print(a)

def challenge3(p,E,G,n):
    messages3 = [b'This is message number 0', b'This is message number 1', b'This is message number 2', b'This is message number 3', b'This is message number 4', b'This is message number 5', b'This is message number 6', b'This is message number 7', b'This is message number 8', b'This is message number 9', b'This is message number 10', b'This is message number 11', b'This is message number 12', b'This is message number 13', b'This is message number 14', b'This is message number 15', b'This is message number 16', b'This is message number 17', b'This is message number 18', b'This is message number 19']
    signatures3 = [(1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 10806826769983118205519436167641899950725280582472608638735513392371584686384166893048743503471423724983188480476928), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 31156068534340446964191818354452555064802650555359431947869491274527449649976459673102144725614653482428587065977833), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 21592992290594833791987252370516877160869824763633022165425667730183075086076056348699109417442689940077274242252546), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 19082734236627043152662882983834387713190002857279679275635944025717469447086728210941432606141420959287892195163514), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 21714534515419694415127259961378629715221177173605605113668642842481122792063846084003176611079461503065067701961882), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 7091756170585099949689537074884836841675558516828960537612750485931154096801379724707153655753749534134171721078630), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 29266690718537796365222264728990837147401275153233621649103946666557220137266857371959272544635969684598193017089373), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 35313065213920359793859783816136021979767307482491298400079745565933691392694465021857497969678316518210551059263638), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 6499337405972909460444294428866921680505313705323256030032929059496627320290485324845834224339973359890255894426904), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 14000938842075027527975707765119922839578698914566224332704848547622780033673761041709465793731181336588590152829689), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 26536871063880625824883122836204271137453499096546727766452607448868225768396460310337930539931242037031488753112174), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 2903344096146112151361203229218997210953673156435025224151491220060811545960537661476923270946587157796871164807096), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 32189130070225448931799850791986880769528400249481003081617896393793418420786846672449175344774547446049755814080479), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 23844100615138644824753119615285071359496998314854854358340053925621726805557749734311472746073147571773191203261613), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 14132102865696363252496144988635861636795837556640496605495692537510479196125678600731590979743325608046063319867443), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 32840819882999759204128962367318930682256677090681515418679013565345524737302881838714105499169858092307603326319443), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 13356107828759955491563054193991849642932660967558823486363758512051237058590420769852318161658820385397109353745561), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 27419317342884423743238060084100586323909004016170589882199034951731011455015171240793104094953041556814593255915445), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 15652788081190180828528355972329584429708029340131453857266109731733080275532959145523245791714981548470324895929419), (1891061390910359406348761758649015995528204028581132464472309941639788797778788315608027220724034631014931937236993, 37858288569436942442032546621619988386166089414627981294778224595838692513383909823659556849057064810166465343026263)]
    A3 = E(35588517809648137129175323977187276202129491123975810843739834407602321942814333082202311699763587006726635006230524, 13102327084583633558752332215628618829045979731964244320046427848488601008255228583383911950340633573818070241085093)
    m1 = messages3[0]
    m2 = messages3[1]

    F = Integers(n)
    
    r      = signatures3[0][0]
    s      = signatures3[0][1]

    sprime = signatures3[1][1]

    k = F((h(m1)-h(m2))/(s-sprime))

    alpha = F((s*k - h(m1))/r)
    if alpha * G == A3:
        print("Cracked private key")
        print(alpha)
# Since the system is lacking randomness, we can also apply the Lattice Attack on the hidden number problem
def challenge4(p,E,G,n):
    #Challenge 4
    messages4 = [b'This is message number 0', b'This is message number 1', b'This is message number 2', b'This is message number 3', b'This is message number 4', b'This is message number 5', b'This is message number 6', b'This is message number 7', b'This is message number 8', b'This is message number 9', b'This is message number 10', b'This is message number 11', b'This is message number 12', b'This is message number 13', b'This is message number 14', b'This is message number 15', b'This is message number 16', b'This is message number 17', b'This is message number 18', b'This is message number 19']
    signatures4 = [(37673961370743096164045747776764714614130027261390717320603297680938738739133098670472068312833007076727544907252407, 18203877769786955482482676508764912653624704768388740194241268201163324328880613151763352077887744552972419291454834), (15218531100931798793286773172608932479277976078046090923920176390453788811910375742051017028280037852488183072048855, 4211736573053633420907312787718566676680859206588586297046364564559138152434266800063962576349268941184495751620020), (7686134237014942857566908588959290133139476866606317828380655788733412606797105306451316528159769022254465008202588, 21246657534002778073380591404209916403229262488547529368616895085816966134459905171793987023677086978792271547820566), (12406548178503445373198366087218605001828611327843928952895159258303607540643870718895097826272829193757006833676043, 14370091177080734873953273798650176442319229966306763343181611949628778168569160270931235582801340250745572559038828), (18960322218894543253031172673317636200986337308274639975537495963949473836807042287187826522460429523698169042902255, 23478129805470475251700777065447410396668189218480093558116488137734749279676725489524272993432268233825350925617098), (33273892905267730267794130979103349549102928989743553785605819375290236618296526136342357675763878551848038597129060, 16293756347354545244627896844614738456640202284158231051310716412449840846062611950749811653551345765557681266333065), (14835638875398731435248668289535266052347506742197427698177905144091740135402200534166813455516763378193328457890142, 24459750266000200259198331396828233200946702420143932750773450485968207734504901039209116885004509882945138557351934), (37276586546831294552289304542479970690872901466317428225682281009209512169277103956272029184983449016461081460946979, 37032807323026950169994421765413857879301847724264555994031867976657306978457344920062159657876886511073093722050495), (16643489404651748756513124451122726418592935185919808568291163160228495045396081342173977990508360057959659138338643, 12210333838933632171470589752035837063351380043904447442984966050311325392759038651600976110880889956948881086590193), (26241752733237044188869764105084486714689746990496516931310283424688919043958364893145626920142098403347459981923073, 12126958336930229702455411840662710244018359528566354706661445421186860887367192005290174614659107301816982341786136), (32767608740031902547753122674327258821756250267591562413261526123645704513171633540690273547965669499949990634646203, 4673474196624013642359691579565430290540228453987521107200756476662239770813809088063992936724108046554118914834510), (15669187740279098228512711975191257556462815684144171807725733230862839622572521607739560468960340089317922377012759, 33823186011733005605636058188163904854003671763315762329002197604976212917149393264275614908162248600687321026882360), (13473777157752438017211096514416984886936690796299789826312873057105211260516766944556142292717088965159231405411186, 31024142037999032476060887610728594929851572772057212683840704902095818287443514327255539524488211739164927336496260), (16013966670430680035180929282438961354643982234717354369235193677536162658506975724192751322389023972446043714732853, 37203985952812936632953092417522883401054343187213211100481710986729246461233878350699775656255713877497248145592286), (11788765591785528747783263163199208252795328396351867891760066632854624979746921873116104799541396365705487862112995, 33008136262020762894985494123443048246294472986048005697686082085176494499337403877387091563486720725359238441427145), (3680702091142953860641445877271125208628017814338716876333116005986930124836351637613595947926725428118208058537345, 20526365277117254210866940904909772379643136554600077547599456446397931766124543260990830887849666409211918210965311), (22266163551991014949290870646378825571952498939520093464701853809993971807930432011415268495944657413336553391424321, 17618081245042499932441502680319760551612904132333328522142404781624107980292192438227283637024290139648107577351449), (37615326439451698201415640160543443984580077083618746521646485034388001759501705776650716753008067181292814250243895, 2814302193694327558909280439497787753799072467815896663717484744649792157033694148075313864719181018874442573743867), (39390643239609318955275375671672121399592664791120422860420385602237871713687123601328647481269616764747125444951265, 14797548204980407431174512391108719871510780621337996125559237035012091027552887811708233988073016517664085610522455), (31366222351338136653450381014063866815960318917116964573901904372521936946391200504566595143847983561084223371993285, 12200298260653535117484470436959005824618964577070258044859357805985011239861204506985549716812620163867075404007878)]
    A4 = E(19720366803126139522044084026979645499798844040229224759299102560392657456005881732938124920204186424453444775200837, 20331697749315728850858413489170908005673506367983063411257352621028305578208097920813941868493826091275512999907582)
    
    m4 = messages4
    s4 = signatures4
    nbCols = len(signatures4) + 2
    nbRows = nbCols
    Aspace = MatrixSpace(QQ, nbRows, nbCols)
    
    A = copy(Aspace.identity_matrix())

    A = A*n
    B = pow(2,256)

    A[ - 2,  - 2] = B / n
    A[ - 1,  - 1] = B

    for i in range(len(m4)):
        
        ai = ((-h(m4[i]))/s4[i][1]) % n
        ti = (s4[i][0]/s4[i][1]) % n
        A[-1, i] = ai
        A[-2, i] = ti
    
    M = A.LLL()

    for v in M:
        if v[-1] == B:
            alpha = ZZ((- v[-2] * n / B)%n)
    
    if (alpha * G == A4):
        print("Cracked private key")
        print(alpha)

def main():
    #Challenge 1
    print("############### Chal 1")
    p,E,G,n = params()
    challenge1(p,E,G,n)
    #################
    #Challenge 2
    print("############### Chal 2")
    challenge2(p,E,G,n)
    #################
    #Challenge 3
    print("############### Chal 3")
    challenge3(p,E,G,n)
    #################
    #Challenge 4
    print("############### Chal 4")
    challenge4(p,E,G,n)
main()